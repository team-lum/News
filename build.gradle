subprojects {

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'jacoco'
    apply plugin: 'pmd'

    group 'team-lum'
    version '1.0-SNAPSHOT'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        compile("org.springframework.boot:spring-boot-starter-web:2.1.1.RELEASE")
        compile("org.springframework.boot:spring-boot-starter-data-elasticsearch:2.1.1.RELEASE")
        compile ("org.springframework.boot:spring-boot-starter-aop:2.1.1.RELEASE")
        compile("org.springframework.retry:spring-retry:1.2.2.RELEASE")

        compile("org.projectlombok:lombok:1.18.2")

        testCompile("org.springframework.boot:spring-boot-starter-test:2.0.6.RELEASE")
        testRuntime("org.mockito:mockito-core:2.21.0")
    }

    jacocoTestReport {
        reports {
            html.enabled = true
        }
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                element = "CLASS"
                limit {
                    counter = "LINE"
//                    minimum = 0.2
                }
            }
        }
    }
    
    pmd {
        ignoreFailures = true
        sourceSets = [sourceSets.main]
        reportsDir = file("$project.buildDir/reports/pmd")
    }

    check.dependsOn jacocoTestCoverageVerification
    check.dependsOn jacocoTestReport
}

/**
 * Get value
 */
task getGitVersion(type: Exec) {
    executable = 'git'
    args = ['describe']
    standardOutput = new ByteArrayOutputStream()
}

/**
 * Generate file with value value for runnable modules
 */
task generateVersion(dependsOn: ['getGitVersion']) {

    def version = tasks.getGitVersion.standardOutput

    doLast {
        subprojects.each { module ->
            if (module.runnable) {
                new File(module.name + '/src/main/resources/version.json')
                        .text = '{\n\t\"value\": \"' + version.toString().trim() + '\"\n}'
                println '['+ module.name + '] version.json created'
            }
        }
    }
}

/**
 * Delete value.json file
 */
task cleanVersion(type:Delete) {
    doLast {
        subprojects.each { module ->
            if (module.runnable) {
                delete(module.name + '/src/main/resources/version.json')
            }
        }
    }
}

task clean(dependsOn: ['cleanVersion'])

/**
 * ========================== Web front tasks ==========================
 */
task buildWebFront(type:Exec) {
    workingDir 'web-front'
    commandLine 'npm', 'run', 'build'
}

task copyWebFront(type: Copy, dependsOn: ['buildWebFront']) {
    from 'web-front/build'
    into 'rest-api-service/src/main/resources/static'
}

/**
 * Generate value file before build
 */
task build(dependsOn: ['generateVersion', 'copyWebFront'])

/**
 * Generate value file before build
 */
task test(dependsOn: ['generateVersion'])


task dockerBuild(type: Exec) {
    executable = 'docker-compose'
    args = ['build']
}

task dockerRun(type: Exec, dependsOn: ['dockerBuild']) {
    executable = 'docker-compose'
    args = ['up', '-d']
}